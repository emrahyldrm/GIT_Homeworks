/*
EMRAH YILDIRIM 111044056
*/

namespace HW08
{
	template <class T>
	class Container
	{
	public:

		Container();
		virtual ~Container();

		virtual int size() const = 0;
		virtual int capacity() const = 0;
		virtual void empty() = 0; 		//delete all elements

		virtual bool add(const T& element) throw (bad_alloc)= 0; //add element throw exc
		virtual void remove(int index) = 0; //remove element
		virtual bool search(const T& element) const = 0; //search element
		virtual int  find(const T& element) const = 0; //return element's index
		virtual T& first() throw(int)  = 0;	//return first element
		virtual T& next() throw(int) = 0; //returns the next element of the Container

		void addAll(const Container<T>& other);
		void removeAll(const Container<T>& other);
		const vector<T>& toVector() const;

		const T& operator [](int index) const;
		T& operator [](int index);
		bool operator ==(const Container<T>& other);
		bool operator !=(const Container<T>& other);
		Container<T>& operator =(const Container<T>& other);


	protected:
		vector<T> cont;
		int callNum;
	};
	
	
	
	
	
	//derived from Container<T> class
	template<class T>
	class SetContainer : public Container<T>
	{
	public:
		SetContainer();
		virtual ~SetContainer();

		virtual int size() const { return cont.size(); }
		virtual int capacity() const { return cont.capacity(); }
		virtual void empty() { cont.clear(); } //delete all elements

		virtual bool add(const T& element) throw (bad_alloc); //add element throw exc
		virtual void remove(int index) throw(int); //remove element throw exc
		virtual bool search(const T& element) const; //search element
		virtual int  find(const T& element) const;
		virtual T& first() throw(int);	//return first throw -1
		virtual T& next() throw(int);	//returns the next element of the Container since the last throw -1
										//call to the function next. If function
										//first is called before this function, it returns the second element.
	};
	
	
	
	template<class T>
	class SortedContainer : public Container<T>
	{
	public:
		SortedContainer();
		virtual ~SortedContainer();


		virtual int size() const { return cont.size(); }
		virtual int capacity() const { return cont.capacity(); }
		virtual void empty() { cont.clear(); } //delete all elements

		virtual bool add(const T& element) throw (bad_alloc); //add element throw exc
		virtual void remove(int index); //remove element throw exc
		virtual bool search(const T& element) const; //search element, throw exc
		virtual int  find(const T& element) const;
		virtual T& first() throw(int);	//return first element
		virtual T& next() throw(int);	//returns the next element of the Container since the last
										//call to the function next. If function
										//first is called before this function, it returns the second element.

		void sort();
	};
	
	
	
	//derived from SortedContainer<T>
	template<class T>
	class SortedSetContainer : public SortedContainer<T>
	{
	public:
		SortedSetContainer();
		virtual ~SortedSetContainer();

		virtual bool add(const T& element) throw (bad_alloc); //add element throw bad_alloc
		
	};
}



>> SetContainer ve SortContainer Container classindan türetildi.
>> SortedSetContainer SortedContainer dan türetildi.


1. Istenen fonksiyonlar pure virtual yapildi ve böylece sinif abstract hale getirildi.
2. add fonksiyonunda push_back den gelen bad_alloc exceptioni rethrow edildi
3. remove fonksiyonunda eger indeks alan disinda ise -1 throw edildi
4. first ve next fonksiyonlarinda eger hic bir eleman yoksa -1 throw edildi
5. size, capacity ve empty fonksiyonlari yazildi.
6. Concrete fonksiyonlardan addAll icinde ilgili classin fonksiyonu kullanimasi icin add fonksiyonu ile ekleme yapildi.
7. 	template<class T>
	int sortedElementCounter(const vector<Container<T>* >& containers)
	{
		SortedContainer<T> *temp;
		int total=0;

		for (int i = 0; i < containers.size(); ++i)
			if (NULL != (temp = dynamic_cast<SortedContainer<T> *>(containers[i])))
				total += containers[i]->size();

		return total;
	}

	global fonksiyonu ile siralama yapilmis containerlardaki eleman sayisi hesaplanmistir.
	Container* ile islem yapilarak late binding yapilmasi saglanmistir.
8. main içerisinde de late binding yapan bir kisim da mevcut.